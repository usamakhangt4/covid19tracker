{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","Fragment","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","ion","separator","Date","toDateString","duration","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchApi","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","test","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","src","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.048c07a0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__UTkVj\",\"card\":\"Cards_card__2ASo4\",\"infected\":\"Cards_infected__2EfL1\",\"recovered\":\"Cards_recovered__3UH-J\",\"deaths\":\"Cards_deaths___Bhee\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\nimport styles from \"./Cards.module.css\";\r\n\r\nexport default function Cards({\r\n  data: { confirmed, recovered, deaths, lastUpdate },\r\n}) {\r\n  if (!confirmed) {\r\n    return \"loading...\";\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <div className={styles.container}>\r\n        <Grid container spacing={3} justify=\"center\">\r\n          <Grid\r\n            item\r\n            component={Card}\r\n            xs={12}\r\n            md={3}\r\n            className={cx(styles.card, styles.infected)}\r\n          >\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                Infected\r\n              </Typography>\r\n              <Typography variant=\"h5\">\r\n                <CountUp\r\n                  start={0}\r\n                  end={confirmed.value}\r\n                  ion={2.5}\r\n                  separator=\",\"\r\n                />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {new Date(lastUpdate).toDateString()}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                Number of active cases of COVID-19\r\n              </Typography>\r\n            </CardContent>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            component={Card}\r\n            xs={12}\r\n            md={3}\r\n            className={cx(styles.card, styles.recovered)}\r\n          >\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                {\" \"}\r\n                Recovered{\" \"}\r\n              </Typography>\r\n              <Typography variant=\"h5\">\r\n                <CountUp\r\n                  start={0}\r\n                  end={recovered.value}\r\n                  duration={2.5}\r\n                  separator=\",\"\r\n                />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {\" \"}\r\n                {new Date(lastUpdate).toDateString()}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                {\" \"}\r\n                Number of recoveries from COVID-19{\" \"}\r\n              </Typography>\r\n            </CardContent>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            component={Card}\r\n            xs={12}\r\n            md={3}\r\n            className={cx(styles.card, styles.deaths)}\r\n          >\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                {\" \"}\r\n                Deaths\r\n              </Typography>\r\n              <Typography variant=\"h5\">\r\n                <CountUp\r\n                  start={0}\r\n                  end={deaths.value}\r\n                  duration={2.5}\r\n                  separator=\",\"\r\n                />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {\" \"}\r\n                {new Date(lastUpdate).toDateString()}{\" \"}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                {\" \"}\r\n                Number of deaths caused by COVID-19{\" \"}\r\n              </Typography>\r\n            </CardContent>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import axios from 'axios';\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\n// fetching cards data\r\nexport const fetchData = async (country) => {\r\n\r\n    let changeableUrl = url;\r\n    if (country) {\r\n        changeableUrl = `${url}/countries/${country}`\r\n    }\r\n\r\n    try {\r\n        const {\r\n          data: { confirmed, recovered, deaths, lastUpdate },\r\n        } = await axios.get(changeableUrl);\r\n        return { confirmed, recovered, deaths, lastUpdate };\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n// fetching chart data\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`)\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }));\r\n\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n//fetching countriesfor country picker\r\nexport const fetchCountries = async () => {\r\n         try {\r\n           const {\r\n             data: { countries },\r\n           } = await axios.get(`${url}/countries`);\r\n           return countries.map((country) => country.name);\r\n         } catch (error) {\r\n           console.log(error);\r\n         }\r\n};\r\n       \r\n\r\n","import React, {useState, useEffect} from 'react'\r\nimport { fetchDailyData } from '../../api'\r\nimport { Line, Bar } from 'react-chartjs-2'\r\nimport styles from './Chart.module.css'\r\n\r\nexport default function Chart({data: {confirmed,recovered,deaths}, country}) {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchApi = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n\r\n        fetchApi();\r\n    },[]);\r\n\r\n    const lineChart = (\r\n        dailyData.length\r\n            ? (\r\n      <Line\r\n        data={{\r\n          labels: dailyData.map(({ date }) => date),\r\n          datasets: [\r\n            {\r\n              data: dailyData.map(({ confirmed }) => confirmed),\r\n              label: \"infected\",\r\n              borderColor: \"#3333ff\",\r\n              fill: true,\r\n            },\r\n            {\r\n              data: dailyData.map(({ deaths }) => deaths),\r\n              label: \"infected\",\r\n                borderColor: \"red\",\r\n              backgroundColor:'rgba(255,0,0,0.5)',\r\n              fill: true,\r\n            },\r\n          ],\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n  const barChart = (\r\n    confirmed ? (\r\n    <Bar\r\n      data=\r\n      {{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data:[confirmed.value, recovered.value,deaths.value]\r\n          },\r\n        ],\r\n      }}\r\n      options=\r\n      {{\r\n        legend: { display: false },\r\n        title: { display: true, test: `Current state in ${country}` },\r\n      }}\r\n    />\r\n  ) : null) \r\n    return (\r\n            <div className={styles.container}>\r\n                {country ? barChart : lineChart}\r\n            </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport { fetchCountries } from \"../../api\";\r\nimport styles from \"./CountryPicker.module.css\";\r\n\r\nexport default function CountryPicker({ handleCountryChange }) {\r\n                 const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n                 useEffect(() => {\r\n                   const fetchApi = async () => {\r\n                     setFetchedCountries(await fetchCountries());\r\n                   };\r\n\r\n                   fetchApi();\r\n                 }, [setFetchedCountries]);\r\n                 // console.log(fetchedCountries);\r\n                 return (\r\n                   <FormControl className={styles.container}>\r\n                     <NativeSelect\r\n                       defaultValue=\"\"\r\n                       onChange={(e) => handleCountryChange(e.target.value)}\r\n                     >\r\n                       <option value=\"\">Global</option>\r\n                       {fetchedCountries.map((country, i) => (\r\n                         <option key={i} value={country}>\r\n                           {country}\r\n                         </option>\r\n                       ))}\r\n                     </NativeSelect>\r\n                   </FormControl>\r\n                 );\r\n               }\r\n","import React, { Component } from \"react\";\nimport { Cards, Chart, CountryPicker } from \"./components\";\nimport { fetchData } from \"./api\";\nimport styles from \"./App.module.css\";\n\nexport default class App extends Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({ data: fetchedData });\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({ data: fetchedData, country: country });\n  };\n\n  render() {\n    const { data, country } = this.state;\n    return (\n      <React.Fragment>\n        <div className={styles.container}>\n          <img src=\"https://i.ibb.co/7QpKsCX/image.png\" alt=\"covid-19\" />\n          <Cards data={data} />\n          <CountryPicker handleCountryChange={this.handleCountryChange} />\n          <Chart data={data} country={country} />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1Ckxk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CountryPicker_container__qQFEx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__FoH8-\"};"],"sourceRoot":""}